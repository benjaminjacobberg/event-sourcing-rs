services:
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_wal_senders=1"
      - "-c"
      - "max_replication_slots=1"
    environment:
      POSTGRES_DB: event_store
      POSTGRES_USER: event_store_user
      POSTGRES_PASSWORD: event_store_password
    ports:
      - 5432:5432
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    restart: always
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,PLAINTEXT_EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_EXTERNAL://localhost:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - 9092:9094
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    ports:
      - 8080:8080
  connect:
    image: debezium/connect:latest
    container_name: connect
    restart: always
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=event_store_configs
      - OFFSET_STORAGE_TOPIC=event_store_offsets
      - STATUS_STORAGE_TOPIC=event_store_statuses
      - CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE=false
    ports:
      - 8083:8083
    volumes:
      - ./register-postgres.json:/kafka/register-postgres.json:z
    # A sneaky way to start the connector when it is ready. ;)
    healthcheck:
      test: curl -i -X POST -H "Accept:application/json" -H  "Content-Type:application/json" http://localhost:8083/connectors/ -d @register-postgres.json
      interval: 10s
      timeout: 10s
      retries: 5